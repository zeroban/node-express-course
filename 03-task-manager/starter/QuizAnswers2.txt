1. In this lesson, you created a middleware function called asyncWrapper. Why?
    a. We created the asyncWrapper to handle the try and catch blocks for us so that our code looked cleaner when looking in the controller tasks.js


2. Suppose that you want to make sure that both a status code and an error message are sent back to the user when they request the URL for a task that does not exist. Assume that youâ€™ve created a CustomAPIError class and an error handler that references that class. Complete the code:
                                const getTask = asyncWrapper(async (req, res, next) => {  
                                const { id: taskID } = req.params;  
                                const task = await Task.findOne({ _id: taskID });  
                                if (!task) {  
                                    // your code here  
                                            return next(CustomAPIError(`No task with id : ${taskID}` found, 404))

                                }  
                                res.status(200).json({ task });  
                                });  
As you will see in the lessons that follow, you do not have to always create the asyncWrapper middleware, because you can instead use an NPM package called express-async-errors that provides the same capability.